import json
import sys
import threading
from datetime import datetime

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

from multiprocessing import Queue
from PyQt5.QtCore import QTimer, pyqtSignal
from PyQt5.QtGui import QStandardItem, QStandardItemModel

sys.path.append("..")
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox, QDialog, QTableView, QTableWidgetItem
from PyQt5.QtCore import QThread, pyqtSignal, QObject
import requests
import stomp
import time
import random
from PyQt5.QtCore import pyqtSignal

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QHeaderView


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(772, 507)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(340, 10, 411, 431))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(230, 60, 71, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(230, 110, 71, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(70, 230, 231, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(70, 270, 231, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(230, 420, 71, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 51, 54, 51))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 110, 54, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 230, 54, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 270, 51, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 340, 51, 61))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 10, 54, 31))
        self.label_6.setObjectName("label_6")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(70, 110, 101, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(70, 10, 231, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.textEdit_2.setFont(font)
        self.textEdit_2.setObjectName("textEdit_2")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(70, 61, 101, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit.setGeometry(QtCore.QRect(70, 350, 231, 22))
        self.dateTimeEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(2020, 1, 1), QtCore.QTime(0, 0, 0)))
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.dateTimeEdit_2 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_2.setGeometry(QtCore.QRect(70, 380, 231, 22))
        self.dateTimeEdit_2.setDateTime(QtCore.QDateTime(QtCore.QDate(2020, 1, 1), QtCore.QTime(0, 0, 0)))
        self.dateTimeEdit_2.setObjectName("dateTimeEdit_2")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(70, 190, 71, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(150, 190, 71, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(230, 190, 71, 31))
        self.pushButton_8.setObjectName("pushButton_8")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 190, 54, 31))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(10, 150, 54, 31))
        self.label_8.setObjectName("label_8")
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(70, 150, 101, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.textEdit_3.setFont(font)
        self.textEdit_3.setObjectName("textEdit_3")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(230, 150, 71, 31))
        self.pushButton_9.setObjectName("pushButton_9")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(10, 310, 51, 31))
        self.label_9.setObjectName("label_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(70, 310, 231, 31))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(150, 420, 71, 31))
        self.pushButton_11.setObjectName("pushButton_11")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 772, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "设置"))
        self.pushButton_2.setText(_translate("MainWindow", "设置"))
        self.pushButton_3.setText(_translate("MainWindow", "查询最新定位"))
        self.pushButton_4.setText(_translate("MainWindow", "查询最新心跳"))
        self.pushButton_5.setText(_translate("MainWindow", "查询"))
        self.label.setText(_translate("MainWindow", "工作模式"))
        self.label_2.setText(_translate("MainWindow", "频率(秒)"))
        self.label_3.setText(_translate("MainWindow", "定位"))
        self.label_4.setText(_translate("MainWindow", "心跳"))
        self.label_5.setText(_translate("MainWindow", "历史记录"))
        self.label_6.setText(_translate("MainWindow", "设备编码"))
        self.comboBox.setItemText(0, _translate("MainWindow", "定时模式#0"))
        self.comboBox.setItemText(1, _translate("MainWindow", "智能模式#1"))
        self.dateTimeEdit.setDisplayFormat(_translate("MainWindow", "yyyy-MM-dd HH:mm:ss"))
        self.dateTimeEdit_2.setDisplayFormat(_translate("MainWindow", "yyyy-MM-dd HH:mm:ss"))
        self.pushButton_6.setText(_translate("MainWindow", "重启"))
        self.pushButton_7.setText(_translate("MainWindow", "关机"))
        self.pushButton_8.setText(_translate("MainWindow", "远程升级"))
        self.label_7.setText(_translate("MainWindow", "其他"))
        self.label_8.setText(_translate("MainWindow", "屏显"))
        self.pushButton_9.setText(_translate("MainWindow", "设置"))
        self.label_9.setText(_translate("MainWindow", "设备信息"))
        self.pushButton_10.setText(_translate("MainWindow", "查询设备信息"))
        self.pushButton_11.setText(_translate("MainWindow", "停止"))


# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1143, 631)
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(10, 10, 1121, 611))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "设备编码"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "纬度"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "经度"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "定位时间"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "定位类型"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Dialog", "定位地址"))


# 推送到主题
__topic_name1 = '/queue/SETTING_CMD_SETT'
__topic_name2 = '/queue/SETTING_CMD_ORD'
# __host = '122.51.209.32'
# __host = '10.81.101.117'
__host = '139.196.160.63'
__port = 61613
__user = 'admin'

# __password = 'admin'

__password = 'nanruan@9.07'


def set_imei(name, data):  # '351608086050742#100863313#300#4'
    mq_conn = stomp.Connection10([(__host, __port)], auto_content_length=False)
    mq_conn.connect(__user, __password, wait=True)
    mq_conn.send(name, data)
    mq_conn.disconnect()


def trans_add(lat, lng):
    base_url = 'http://api.map.baidu.com/reverse_geocoding/v3/?ak=SMm8htpBXtu3Hd4n5XUsQwiUnMGvWdBU&output=json&coordtype=wgs84ll&location='
    location = str(lat) + ',' + str(lng)
    url = base_url + location + '&extensions_poi=1'
    res = requests.get(url)
    d = json.loads(res.text)
    try:
        addr = d['result']['formatted_address']
        pos = d['result']['pois'][0]
        adds_info = '距{}({})约{}米.'.format(pos['name'], pos['direction'], pos['distance'])
        ps = addr + ',' + adds_info
        return ps
    except Exception as e:
        print(e)
        return d


class ChildWin(QMainWindow, Ui_Dialog):
    # 定义信号
    # signal = QtCore.pyqtSignal(str, str)

    def __init__(self):
        super(ChildWin, self).__init__()
        self.setupUi(self)
        self.setWindowTitle('数据详情')
        self.setWindowIcon(QIcon('i.ico'))
        # self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.horizontalHeader().resizeSection(0, 150)
        self.tableWidget.horizontalHeader().resizeSection(1, 100)
        self.tableWidget.horizontalHeader().resizeSection(2, 100)
        self.tableWidget.horizontalHeader().resizeSection(3, 200)
        self.tableWidget.horizontalHeader().resizeSection(4, 80)
        self.tableWidget.horizontalHeader().resizeSection(5, 400)
        # self.retranslateUi(self)
        # self.pushButton.clicked.connect(self.OPEN)

    # def OPEN(self):
    #     # self.ChildDialog.signal.connect(self.getData)
    #     self.show()


class MyWindow(QMainWindow, Ui_MainWindow):
    parentclicked = pyqtSignal(str)

    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        # 创建线程
        # self.thread = Runthread()
        self.setupUi(self)
        self.topic_name1 = '/queue/SETTING_CMD_SETT'
        self.topic_name2 = '/queue/SETTING_CMD_ORD'
        self.topic_name3 = '/queue/SETTING_CMD_INQ'
        self.setWindowTitle('电子回单')
        self.setWindowIcon(QIcon('i.ico'))
        self.textEdit_2.textChanged.connect(self.show_text_func)  # IMEI 输入框
        self.pushButton.clicked.connect(self.set_work_mode)  # 设置工作模式
        self.pushButton_2.clicked.connect(self.set_froq)  # 设置工作频率
        self.pushButton_3.clicked.connect(self.get_new_postion)  # 获取最新定位
        self.pushButton_4.clicked.connect(self.get_new_HBT)  # 获取心跳数据
        self.pushButton_5.clicked.connect(self.parentsend)  # 获取定位记录
        self.pushButton_6.clicked.connect(self.set_new_pos)  # 最新定位
        self.pushButton_7.clicked.connect(self.set_shutdown)  # 关机
        self.pushButton_8.clicked.connect(self.set_update)  # 远程升级
        self.pushButton_9.clicked.connect(self.set_led)  # 设置屏显
        self.pushButton_10.clicked.connect(self.get_info)  # 设置屏显
        self.pushButton_11.clicked.connect(self.a)  # 设置屏显
        self.parentclicked.connect(self.recv2)
        self.w2 = ChildWin()
        self.flag = 1
        self.num = 0

    def setup_time(self):
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.operate)  # 每次计时到时间时发出信号
        self.timer.start(1000)  # 设置计时间隔并启动；单位毫秒
        print(datetime.now())

    def show_text_func(self):
        self.textBrowser.setPlainText(self.textEdit_2.toPlainText())

    def operate(self):
        self.num = self.num + 1

    def set_work_mode(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        b = self.comboBox.currentText()  # 获取当前工作模式内容   # '351608086050742#100863313#0#1'
        if a:
            tag1 = a[-5:]
            tag2 = random.randint(1, 999)
            mode = b.split('#')[1]
            tag = '1' + str(tag1) + str(tag2)
            data = str(a) + '#' + tag + '#' + str(mode) + '#' + '1'
            i = 0
            print(tag)
            url1 = 'http://106.14.17.157:7777/api/get_order_res/'
            data2 = {'code': 'qwer?1234!@#1312',
                     'imei': a,
                     'tag': int(tag)
                     }
            self.flag = 1
            count = 0
            set_imei(name=self.topic_name1, data=data)
            while self.flag and count <= 30:
                count = count + 1
                self.textBrowser.append(f'命令已发送，请等待确认结果！------{count}')
                time.sleep(1)
                res = requests.post(url=url1, data=json.dumps(data2))
                print(json.loads(res.text), count)
                QApplication.processEvents()
                if json.loads(res.text):
                    print(self.flag)
                    self.textBrowser.append('命令设置成功！')
                    self.flag = 0
                    break
            if count == 30:
                self.textBrowser.append('命令设置失败，请重试！')
        else:
            QMessageBox.warning(self,
                                "警告",
                                "设备码为空！",
                                QMessageBox.Yes | QMessageBox.No)

    def set_froq(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        b = self.textEdit.toPlainText()  # 获取当前工作模式内容   # '351608086050742#100863313#0#1'
        if int(b) < 10:
            QMessageBox.warning(self,
                                "警告",
                                "设置的频率值不能低于10秒！",
                                QMessageBox.Yes | QMessageBox.No)
        else:
            if a:
                tag1 = a[-5:]
                tag2 = random.randint(10, 99)
                tag = '04' + str(tag1) + str(tag2)
                data = str(a) + '#' + tag + '#' + str(b) + '#' + '4'
                i = 0
                print(tag)
                url1 = 'http://106.14.17.157:7777/api/get_order_res/'
                data2 = {'code': 'qwer?1234!@#1312',
                         'imei': a,
                         'tag': int(tag)
                         }
                self.flag = 1
                count = 0
                set_imei(name=self.topic_name1, data=data)
                while self.flag and count <= 30:
                    count = count + 1
                    self.textBrowser.append(f'命令已发送，请等待确认结果！------{count}')
                    time.sleep(1)
                    res = requests.post(url=url1, data=json.dumps(data2))
                    QApplication.processEvents()
                    if json.loads(res.text):
                        cc = '命令设置成功,当前GPS定位频率为{}秒/次！'.format(b)
                        self.textBrowser.append(cc)
                        self.flag = 0
                        break
                if count == 30:
                    self.textBrowser.append('命令发送失败，请重试！')
            else:
                QMessageBox.warning(self,
                                    "警告",
                                    "设备码为空！",
                                    QMessageBox.Yes | QMessageBox.No)

    def get_new_postion(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        if a:
            QApplication.processEvents()
            url1 = 'http://106.14.17.157:7777/api/get_test_elc/'
            data2 = {'code': 'qwer?1234!@#1312',
                     'imei': a
                     }
            print(a)
            res = requests.post(url=url1, data=json.dumps(data2))
            res = json.loads(res.text)
            if res == '暂无数据！':
                res_str = '暂无数据！'
            else:
                addr = trans_add(lat=res['Latitude'], lng=res['Longitude'])
                res_str = f"<span>纬度:{res['Latitude']}<br>" \
                          f"经度:{res['Longitude']}<br>" \
                          f"地址:{addr}<br>" \
                          f"IMEI:{res['devId']}<br>" \
                          f"时间:{res['time']}<br>" \
                          f"定位类型:{res['type']}<br>" \
                          "<\span>"
            self.textBrowser.setText(res_str)
        else:
            QMessageBox.warning(self,
                                "警告",
                                "设备码为空！",
                                QMessageBox.Yes | QMessageBox.No)

    def get_new_HBT(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        if a:
            QApplication.processEvents()
            url1 = 'http://106.14.17.157:7777/api/get_test_hbt/'
            data2 = {'code': 'qwer?1234!@#1312',
                     'imei': a
                     }
            res = requests.post(url=url1, data=json.dumps(data2))
            res = json.loads(res.text)
            if res == '暂无数据':
                res_str = '暂无数据！'
            else:
                res_str = f"<span>IMEI:{res['devId']}<br>" \
                          f"GSM信号:{res['gsmLevel']}<br>" \
                          f"充电状态:{res['charging']}<br>" \
                          f"电量:{res['lithium']}<br>" \
                          f"时间:{res['date']}<br>" \
                          f"温度:{res['temperature']}<br>" \
                          f"湿度:{res['humidity']}<br>" \
                          f"光感:{res['light']}<br>" \
                          "<\span>"
            self.textBrowser.setText(res_str)
        else:
            QMessageBox.warning(self,
                                "警告",
                                "设备码为空！",
                                QMessageBox.Yes | QMessageBox.No)

    def parentsend(self):
        imei = self.textEdit_2.toPlainText()  # 获取编辑框内容
        start_time = self.dateTimeEdit.text()
        end_time = self.dateTimeEdit_2.text()
        da = str(imei) + '#' + str(start_time) + '#' + str(end_time)
        self.parentclicked.emit(da)

    def child(self):
        # self.w2 = W2()
        # self.w2.childclicked.connect(self.recv)  # 字窗体向父窗体传数据的“信号与槽连接”
        self.w2.show()

    def recv2(self, s):

        # self.w2.tableWidget.setRowCount(100)  # 设置行数--不包括标题列
        self.w2.tableWidget.setColumnCount(6)  # 设置列数
        # name = QTableWidgetItem("测试测测试")
        # self.w2.tableWidget.setItem(2, 2, name)
        print(s)
        imei = str(s).split('#')[0]
        start_time = str(s).split('#')[1]
        end_time = str(s).split('#')[2]
        data = {'code': 'qwer?1234!@#1312',
                'imei': imei,
                'start_time': start_time,
                'end_time': end_time
                }
        url4 = 'http://106.14.17.157:7777/api/get_test_mp/'
        res = requests.post(url=url4, data=json.dumps(data))
        self.w2.tableWidget.setRowCount(50)  # 设置行数--不包括标题列
        if len(json.loads(res.text)):
            for i in range(50):
                imei = QTableWidgetItem(str(json.loads(res.text)[i]['devId']))
                lng = QTableWidgetItem(str(json.loads(res.text)[i]['longitude']))  # 经度
                lat = QTableWidgetItem(str(json.loads(res.text)[i]['latitude']))  # 纬度
                p_time = QTableWidgetItem(str(json.loads(res.text)[i]['time']))
                p_type = QTableWidgetItem(str(json.loads(res.text)[i]['type']))
                p_addr = QTableWidgetItem(
                    str(trans_add(lat=json.loads(res.text)[i]['latitude'], lng=json.loads(res.text)[i]['longitude'])))
                self.w2.tableWidget.setItem(i, 0, imei)
                self.w2.tableWidget.setItem(i, 1, lng)
                self.w2.tableWidget.setItem(i, 2, lat)
                self.w2.tableWidget.setItem(i, 3, p_time)
                self.w2.tableWidget.setItem(i, 4, p_type)
                self.w2.tableWidget.setItem(i, 5, p_addr)
        # 发送信号
        # self.signal.emit(str(imei), str(start_time), str(end_time))

    def set_led(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        b = self.textEdit_3.toPlainText()  # 获取当前编辑框内容   # '351608086050742#100863313#0#1'
        if a:
            tag1 = a[-5:]
            tag2 = random.randint(1, 999)
            tag = '7' + str(tag1) + str(tag2)
            data = str(a) + '#' + tag + '#' + str(b) + '#' + '7'
            print(tag)
            url1 = 'http://106.14.17.157:7777/api/get_order_res/'
            data2 = {'code': 'qwer?1234!@#1312',
                     'imei': a,
                     'tag': int(tag)
                     }
            self.flag = 1
            count = 0
            set_imei(name=self.topic_name1, data=data)
            while self.flag and count <= 30:
                count = count + 1
                self.textBrowser.append(f'命令已发送，请等待确认结果！------{count}')
                time.sleep(1)
                res = requests.post(url=url1, data=json.dumps(data2))
                QApplication.processEvents()
                if json.loads(res.text):
                    self.textBrowser.append('命令设置成功！')
                    self.flag = 0
                    break
            if count == 30:
                self.textBrowser.append('命令发送失败，请重试！')
        else:
            QMessageBox.warning(self,
                                "警告",
                                "设备码为空！",
                                QMessageBox.Yes | QMessageBox.No)

    def set_update(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        if a:
            tag1 = a[-5:]
            tag2 = random.randint(1, 999)
            tag = '7' + str(tag1) + str(tag2)
            data = str(a) + '#' + tag + '#' + '2'
            print(tag, '更新')
            url1 = 'http://106.14.17.157:7777/api/get_order_res/'
            data2 = {'code': 'qwer?1234!@#1312',
                     'imei': a,
                     'tag': int(tag)
                     }
            self.flag = 1
            count = 0
            set_imei(name=self.topic_name2, data=data)
            while self.flag and count <= 30:
                count = count + 1
                self.textBrowser.append(f'命令已发送，请等待确认结果！------{count}')
                time.sleep(1)
                res = requests.post(url=url1, data=json.dumps(data2))
                QApplication.processEvents()
                if json.loads(res.text):
                    self.textBrowser.append('命令设置成功！')
                    self.flag = 0
                    break
            if count == 30:
                self.textBrowser.append('命令设置失败，请重试！')

        else:
            QMessageBox.warning(self,
                                "警告",
                                "设备码为空！",
                                QMessageBox.Yes | QMessageBox.No)

    def set_shutdown(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        if a:
            tag1 = a[-5:]
            tag2 = random.randint(1, 999)
            tag = '7' + str(tag1) + str(tag2)
            data = str(a) + '#' + tag + '#' + '3'
            print(tag, '关机')
            # url1 = 'http://106.14.17.157:7777/api/get_order_res/'
            # data2 = {'code': 'qwer?1234!@#1312',
            #          'imei': a,
            #          'tag': int(tag)
            #          }
            self.flag = 1
            self.textBrowser.append('命令已发送，请在设备上确定!')
            QApplication.processEvents()
            set_imei(name=self.topic_name2, data=data)
        else:
            QMessageBox.warning(self,
                                "警告",
                                "设备码为空！",
                                QMessageBox.Yes | QMessageBox.No)

    def set_new_pos(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        if a:
            tag1 = a[-5:]
            tag2 = random.randint(1, 999)
            tag = '7' + str(tag1) + str(tag2)
            data = str(a) + '#' + tag + '#' + '1'
            print(tag, '获取最新定位')
            url1 = 'http://106.14.17.157:7777/api/get_order_res/'
            data2 = {'code': 'qwer?1234!@#1312',
                     'imei': a,
                     'tag': int(tag)
                     }
            self.flag = 1
            count = 0
            set_imei(name=self.topic_name2, data=data)
            while self.flag and count < 30:
                self.textBrowser.append(f'命令已发送，请等待确认结果！------{count}')
                time.sleep(1)
                res = requests.post(url=url1, data=json.dumps(data2))
                QApplication.processEvents()
                if json.loads(res.text):
                    self.textBrowser.append('命令设置成功！')
                    self.flag = 0
                    break
            if count == 30:
                self.textBrowser.append('命令设置失败，请重试！')
        else:
            QMessageBox.warning(self,
                                "警告",
                                "设备码为空！",
                                QMessageBox.Yes | QMessageBox.No)

    def get_info(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        if a:
            tag1 = a[-5:]
            tag2 = random.randint(1000, 9999)
            tag = str(tag1) + str(tag2)
            data = str(a) + '#' + tag
            print(tag)
            url2 = 'http://106.14.17.157:7777/api/get_test_info/'
            data3 = {'code': 'qwer?1234!@#1312',
                     'imei': a,
                     'tag': int(tag)
                     }
            self.flag = 1
            count = 0
            set_imei(name=self.topic_name3, data=data)
            while self.flag and count < 30:
                self.textBrowser.append(f'命令已发送，请等待确认结果！------{count}')
                QApplication.processEvents()
                count = count + 1
                time.sleep(1)
                res = requests.post(url=url2, data=json.dumps(data3))
                res = json.loads(res.text)
                if res == '暂无数据！':
                    res_str = '暂无数据！'
                else:
                    res_str = f"<span>IMEI:{res['devId']}<br>" \
                              f"GSM信号:{res['gsmLevel']}<br>" \
                              f"电量:{res['lithium']}<br>" \
                              f"时间:{res['date']}<br>" \
                              f"定位频率:{res['posInvl']}<br>" \
                              f"休眠频率:{res['time2Sleep']}<br>" \
                              f"心跳频率:{res['hbInvl']}<br>" \
                              f"工作模式:{res['workMode']}<br>" \
                              "<\span>"
                    self.flag = 0
                    QApplication.processEvents()
                    self.textBrowser.append(res_str)
                    break
                QApplication.processEvents()
                self.textBrowser.append(res_str)
                # self.textBrowser.append('命令设置成功！')
        else:
            QMessageBox.warning(self,
                                "警告",
                                "设备码为空！",
                                QMessageBox.Yes | QMessageBox.No)

    def a(self):
        t = threading.Thread(target=self.stop, name='t')
        t.start()

    def stop(self):
        a = self.textEdit_2.toPlainText()  # 获取编辑框内容
        print(a)
        self.flag = 0
        QApplication.processEvents()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    myWin = MyWindow()
    ChildWindow = ChildWin()
    myWin.pushButton_5.clicked.connect(myWin.child)
    myWin.show()
    sys.exit(app.exec_())

'''5602FF00011003516080870791129460042737500744C0DE0D0A'''
