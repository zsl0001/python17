import json
import sys
import PyQt5
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import requests
import stomp
import time
import random
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtCore import QTimer, pyqtSignal
from PyQt5.QtGui import QStandardItem, QStandardItemModel
from geopy.distance import geodesic

sys.path.append("..")
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox, QDialog, QTableView, QTableWidgetItem
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled2.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(735, 519)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setWindowTitle('电子回单')
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(160, 170, 81, 31))
        self.pushButton.setObjectName("pushButton")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 10, 54, 31))
        self.label_6.setObjectName("label_6")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(70, 10, 171, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.textEdit_2.setFont(font)
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 50, 54, 31))
        self.label_7.setObjectName("label_7")
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(70, 50, 171, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.textEdit_3.setFont(font)
        self.textEdit_3.setObjectName("textEdit_3")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(250, 10, 471, 461))
        self.textBrowser.setObjectName("textBrowser")
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit.setGeometry(QtCore.QRect(90, 90, 151, 31))
        self.dateTimeEdit.setDate(QtCore.QDate(2020, 1, 2))
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 90, 81, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 130, 81, 31))
        self.label_4.setObjectName("label_4")
        self.dateTimeEdit_2 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_2.setGeometry(QtCore.QRect(90, 130, 151, 31))
        self.dateTimeEdit_2.setDate(QtCore.QDate(2020, 1, 2))
        self.dateTimeEdit_2.setObjectName("dateTimeEdit_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 735, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "查询"))
        self.label_6.setText(_translate("MainWindow", "设备编码"))
        self.label_7.setText(_translate("MainWindow", "合同号"))
        self.dateTimeEdit.setDisplayFormat(_translate("MainWindow", "yyyy-MM-dd HH:mm:ss"))
        self.label_3.setText(_translate("MainWindow", "定位开始时间"))
        self.label_4.setText(_translate("MainWindow", "定位结束时间"))
        self.dateTimeEdit_2.setDisplayFormat(_translate("MainWindow", "yyyy-MM-dd HH:mm:ss"))



# distance1 = geodesic((i['latitude'], i['longitude']), FromLocation).km
# distance2 = geodesic((i['latitude'], i['longitude']), ToLocation).km
url5 = 'http://106.14.17.157:7777/api/get_test_ln/'
url4 = 'http://106.14.17.157:7777/api/get_mp/'


def trans_add(lat, lng):
    base_url = 'http://api.map.baidu.com/reverse_geocoding/v3/?ak=SMm8htpBXtu3Hd4n5XUsQwiUnMGvWdBU&output=json&coordtype=wgs84ll&location='
    location = str(lat) + ',' + str(lng)
    url = base_url + location + '&extensions_poi=1'
    res = requests.get(url)
    d = json.loads(res.text)
    try:
        addr = d['result']['formatted_address']
        pos = d['result']['pois'][0]
        adds_info = '距{}({})约{}米.'.format(pos['name'], pos['direction'], pos['distance'])
        ps = addr + ',' + adds_info
        return ps
    except Exception as e:
        print(e)
        return d


class MyWindow(QMainWindow, Ui_MainWindow):

    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        self.setupUi(self)
        self.pushButton.clicked.connect(self.get_dis)  # 设置工作模式

    def get_dis(self):
        imei = self.textEdit_2.toPlainText()  # 获取编辑框内容
        patcode = self.textEdit_3.toPlainText()  # 获取编辑框内容
        start_time = self.dateTimeEdit.text()
        end_time = self.dateTimeEdit_2.text()
        data = {'code': 'qwer?1234!@#1312',
                'imei': imei,
                'patcode': patcode
                }
        data2 = {'code': 'qwer?1234!@#1312',
                 'imei': imei,
                 'start_time': str(start_time),
                 'end_time': str(end_time)
                 }
        res = requests.post(url=url5, data=json.dumps(data))
        res = json.loads(res.text)
        res2 = requests.post(url=url4, data=json.dumps(data2))
        res2 = json.loads(res2.text)
        for i in res2:
            distance1 = geodesic((i['latitude'], i['longitude']),
                                 res[0]).km  # 目的地距离  to_laction, from_laction, res.Index_From, res.Index_To
            distance2 = geodesic((i['latitude'], i['longitude']), res[1]).km  # 出发地距离
            addr = trans_add(lat=i['latitude'], lng=i['longitude'])
            to_addr = trans_add(res[0].split(',')[0], res[0].split(',')[1])
            from_addr = trans_add(res[1].split(',')[0], res[1].split(',')[1])
            # print(i['time'], addr, distance1, distance2, to_addr, i['type'], from_addr)
            res_str = "<span>定位时间:{}<br>定位地址:{}<br>距离目的地距离:{}.km<br>距离出发地距离:{}.km<br>出发地位置:{}<br>目的位置:{}<br>定位类型:{}<br><\span>".format(
                i['time'], addr, round(distance1, 2), round(distance2, 2), to_addr, from_addr, i['type'])
            QApplication.processEvents()
            self.textBrowser.append(res_str)


# data2 = {'code': 'qwer?1234!@#1312',
#          'imei': '351608087079948',
#          'start_time': '2020-07-05 00:00:00',
#          'end_time': '2020-07-07 00:00:00'
#          }
# res2 = requests.post(url=url4, data=json.dumps(data2))
# res2 = json.loads(res2.text)
# print(res2)
if __name__ == '__main__':
    app = QApplication(sys.argv)
    myWin = MyWindow()
    myWin.show()
    sys.exit(app.exec_())
